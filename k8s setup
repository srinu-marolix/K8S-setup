https://kubernetes.io/docs/setup/production-environment/tools/kubeadm/install-kubeadm/

cat <<EOF | sudo tee /etc/modules-load.d/k8s.conf
br_netfilter
EOF

2)

cat <<EOF | sudo tee /etc/sysctl.d/k8s.conf
net.bridge.bridge-nf-call-ip6tables = 1
net.bridge.bridge-nf-call-iptables = 1
EOF

3)

sudo sysctl --system


Container D Set up
===================

4)

cat <<EOF | sudo tee /etc/modules-load.d/containerd.conf
overlay
br_netfilter
EOF

6)
sudo modprobe overlay
7)
sudo modprobe br_netfilter

8)
cat <<EOF | sudo tee /etc/sysctl.d/99-kubernetes-cri.conf
net.bridge.bridge-nf-call-iptables  = 1
net.ipv4.ip_forward                 = 1
net.bridge.bridge-nf-call-ip6tables = 1
EOF

9)
sudo sysctl --system

10)
sudo apt-get update
sudo apt install containerd -y

11)
 sudo mkdir -p /etc/containerd

12)
containerd config default | sudo tee /etc/containerd/config.toml

13)
sudo systemctl restart containerd


14)

sudo vim /etc/containerd/config.toml

Change "SystemdCgroup" parameter value to "true"


Ex: Location:
  [plugins."io.containerd.grpc.v1.cri".containerd.runtimes.runc.options]
    SystemdCgroup = true


15)	
sudo systemctl restart containerd	
	
	
16)	 Install Kubeadm Kubectl kubelet 
===============================

	
sudo apt-get update
sudo apt-get install -y apt-transport-https ca-certificates curl
curl -fsSL https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo gpg --dearmor -o /etc/apt/keyrings/kubernetes-archive-keyring.gpg
echo "deb [signed-by=/etc/apt/keyrings/kubernetes-archive-keyring.gpg] https://apt.kubernetes.io/ kubernetes-xenial main" | sudo tee /etc/apt/sources.list.d/kubernetes.list	
sudo apt-get update
sudo apt-cache policy kubelet | head -n 20	
VERSION=1.26.0-00
sudo apt-get update
sudo apt-get install -y kubelet=$VERSION kubeadm=$VERSION kubectl=$VERSION
sudo apt-mark hold kubelet kubeadm kubectl
sudo systemctl status kubelet.service 
sudo systemctl status containerd.service 
sudo systemctl enable kubelet.service 	
sudo systemctl enable containerd.service 
ls -l /proc/sys/net/ipv4/ip_forward		
echo 1 > /proc/sys/net/ipv4/ip_forward	
=======================================================================
https://docs.projectcalico.org/getting-started/kubernetes/self-managed-onprem/onpremises	
	
Only On Master Node:
===================	
	

2)  kubeadm config print init-defaults| tee ClusterConfiguration.yaml


3) Open a File Do Below Changes (ClusterConfiguration.yaml)

    a) advertiseAddress: 172.31.37.112 (localAPIEndpoint: Master Node IP)

    b) criSocket: /run/containerd/containerd.sock

	c) kubernetesVersion: 1.26.0
	
	d) Add Below Line (End of The File)
        
---
apiVersion: kubelet.config.k8s.io/v1beta1
kind: KubeletConfiguration
cgroupDriver: systemd
4) Create Cluser 
     		
  	  sudo kubeadm init --config=ClusterConfiguration.yaml
	  
5) Copy Step4 cmd output into Notepad
    
	
6) 
 curl https://docs.projectcalico.org/archive/v3.21/manifests/calico.yaml -O


     kubectl apply -f calico.yaml


https://docs.tigera.io/archive/v3.21/getting-started/kubernetes/self-managed-onprem/onpremises




Your Kubernetes control-plane has initialized successfully!

To start using your cluster, you need to run the following as a regular user:

  mkdir -p $HOME/.kube
  sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
  sudo chown $(id -u):$(id -g) $HOME/.kube/config

Alternatively, if you are the root user, you can run:

  export KUBECONFIG=/etc/kubernetes/admin.conf

You should now deploy a pod network to the cluster.
Run "kubectl apply -f [podnetwork].yaml" with one of the options listed at:
  https://kubernetes.io/docs/concepts/cluster-administration/addons/

Then you can join any number of worker nodes by running the following on each as root:

kubeadm join 172.31.7.183:6443 --token abcdef.0123456789abcdef \
        --discovery-token-ca-cert-hash sha256:31b48221dcafa7f9c73e06ffd46d8cdebe1796805a6b8b9e20f83663c338607c

In master
1.kubectl get nodes  (kubectl is a kubernetes command)
2.kubectl ns (name spaces)
3.kubectl get pods -n kubectl-system
4.ss -nltp
